/* This code is not given to players
 * 
 * 
*/

#include <Wire.h>   // Uno: A4 (SDA), A5 (SCL)
                    // Mega: 20 (SDA), 21 (SCL)
                    // rpi: 
#include "U8glib.h"
#include <IRremote.h>

#define I2C_ADDRESS 0x04

#define LED_PIN 13
#define LCD_CONTRAST_PIN  3
#define LCD_BACKLIGHT_PIN 9
#define LCD_CONTRAST      125

#define PIPELINE_PIN1 29 //44
#define PIPELINE_PIN2 27 //46
#define PIPELINE_PIN3 25 //48
#define PIPELINE_PIN4 23 //50
#define PIPELINE_PUMP_PIN 21 //52

#define LED_LIGHT_UP 0
#define LED_LIGHT_DOWN 1
#define LED_LIGHT_UP 2
#define LED_LIGHT_OFF 3

#define LCD_BANNER 0
#define LCD_NEWS 1
#define LCD_TOP 2

IRsend irsend;  //Default: pin 3 on Uno, 9 on Mega

U8GLIB_ST7920_128X64 u8g(22, 23, 2, U8G_PIN_NONE); // SPI connection

boolean FLAG_READY = false;
uint8_t FLAG_KEY[17];
char FLAG_ENC[17];

String lastNews;

#define hf7_width 64
#define hf7_height 64
static unsigned char hf7_bits[] U8G_PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x55, 0x55,
   0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x02, 0x00, 0x00,
   0x00, 0x00, 0x55, 0x54, 0x51, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x44, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x08, 0x00, 0x00,
   0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
   0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x00, 0x10,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x80, 0x0e, 0x00, 0xf8, 0x80, 0xbf, 0xff, 0x01,
   0x84, 0x1f, 0x00, 0xf8, 0xc0, 0xff, 0xff, 0x01, 0x80, 0x1f, 0x00, 0xf8,
   0xe0, 0xff, 0xff, 0x01, 0x80, 0x0f, 0x00, 0xfc, 0xf0, 0xff, 0xff, 0x01,
   0x80, 0x1f, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0x01, 0x82, 0x1f, 0x00, 0xf8,
   0xf8, 0x03, 0x00, 0x40, 0x80, 0x1f, 0x00, 0xf8, 0xf8, 0x01, 0x00, 0x00,
   0x80, 0x0f, 0x00, 0xfc, 0xf8, 0x01, 0x00, 0x00, 0x80, 0x1f, 0xff, 0xff,
   0xf8, 0xff, 0xff, 0x01, 0x80, 0x1f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x01,
   0x80, 0x1f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x01, 0x80, 0x0f, 0xff, 0xff,
   0xf8, 0xff, 0xff, 0x41, 0x80, 0x1f, 0x54, 0xfd, 0xf8, 0x93, 0x24, 0x00,
   0x82, 0x1f, 0x00, 0xf8, 0xf8, 0x01, 0x00, 0x00, 0x80, 0x1f, 0x00, 0xf8,
   0xf8, 0x01, 0x00, 0x00, 0x80, 0x0f, 0x00, 0xfc, 0xf8, 0x01, 0x00, 0x00,
   0x80, 0x1f, 0x00, 0xf8, 0xf8, 0x01, 0x00, 0x20, 0x84, 0x1f, 0x00, 0xf8,
   0xf8, 0x01, 0x00, 0x00, 0x80, 0x1f, 0x00, 0xf8, 0xf9, 0x01, 0x00, 0x00,
   0x80, 0x0f, 0x00, 0xf8, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x10,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xa0,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x08,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
   0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define lol_width 64
#define lol_height 46
static unsigned char lol_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x47, 0x08, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x80, 0xe1, 0x01, 0xe2,
   0x07, 0x00, 0x00, 0x00, 0x40, 0x1c, 0x20, 0xc0, 0x0d, 0x00, 0x00, 0x00,
   0x20, 0xe6, 0x03, 0x30, 0x06, 0x00, 0x00, 0x00, 0x90, 0x13, 0x06, 0x08,
   0x0f, 0x00, 0x00, 0x00, 0xd0, 0x09, 0x08, 0x0c, 0x0b, 0x00, 0x00, 0x00,
   0x08, 0x04, 0x08, 0x04, 0x08, 0x00, 0x00, 0x00, 0x08, 0x04, 0x08, 0x04,
   0x08, 0x00, 0x00, 0x00, 0x08, 0x74, 0x08, 0x04, 0x1c, 0x00, 0x00, 0x00,
   0x04, 0x76, 0x08, 0x04, 0x14, 0x00, 0x00, 0x00, 0x84, 0x24, 0x08, 0xf8,
   0x17, 0x00, 0x00, 0x00, 0x04, 0x1a, 0x04, 0x20, 0x18, 0x00, 0x00, 0x00,
   0x04, 0xe0, 0x03, 0x30, 0x21, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xdc,
   0x26, 0x00, 0x00, 0x00, 0x04, 0x00, 0xd0, 0x49, 0x48, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xec, 0x4f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x24,
   0x54, 0x00, 0x00, 0x00, 0x04, 0x00, 0xa0, 0xe4, 0x5f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x24, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x24,
   0x28, 0x04, 0x7c, 0x04, 0x04, 0x00, 0x00, 0x24, 0x28, 0x04, 0xc6, 0x0c,
   0x04, 0x00, 0x00, 0x28, 0x28, 0x06, 0xc2, 0x04, 0x08, 0x00, 0x00, 0x28,
   0x2c, 0x04, 0x82, 0x0c, 0x88, 0x00, 0x00, 0x2c, 0x14, 0x06, 0x83, 0x04,
   0x08, 0x00, 0x00, 0x10, 0x24, 0x04, 0xc2, 0x04, 0x88, 0x00, 0x08, 0x14,
   0x24, 0x06, 0xc6, 0x0c, 0x10, 0x01, 0x10, 0x14, 0x24, 0xfc, 0x7c, 0xfc,
   0x10, 0x00, 0x40, 0xb4, 0x2c, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x14,
   0x29, 0x00, 0x00, 0x00, 0x20, 0x02, 0x40, 0x12, 0x2a, 0x00, 0x00, 0x00,
   0x20, 0x00, 0x1c, 0x52, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x04, 0x20, 0x92,
   0x28, 0x00, 0x00, 0x00, 0x80, 0x08, 0x80, 0xd2, 0x26, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x00, 0x13, 0x27, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x32,
   0x22, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xc2, 0x11, 0x00, 0x00, 0x00,
   0x00, 0x0c, 0x05, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x38, 0x28, 0x1e,
   0x0e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 0xf0, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x80, 0x07, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   
/* setup() */
void setup(void) {
  Serial.begin(9600);

  // initialize i2c as slave
  Wire.begin(I2C_ADDRESS); 
  
  // define callbacks for i2c communication
  Wire.onReceive(i2c_receiveData);
  Wire.onRequest(i2c_sendData);
  
  pinMode(LED_PIN, OUTPUT);
  pinMode(LCD_CONTRAST_PIN, OUTPUT);
  pinMode(LCD_BACKLIGHT_PIN, OUTPUT);
  digitalWrite(LCD_BACKLIGHT_PIN, HIGH);
  analogWrite(LCD_CONTRAST_PIN, LCD_CONTRAST);
  u8g.setColorIndex(1);

  Serial.println("Ready!");
}

/* loop() */
void loop(void) {
  char c;
  String msg;
  char cmd;
  String args;
  draw();

  // Process serial inputs
  if (Serial.available() > 0) {
    while(Serial.available()) {
      c = (char)Serial.read();
      msg += c;
    }

    // say what you got:
    Serial.print("Received (serial): ");
    Serial.println(msg);

    cmd = msg.substring(0,1).c_str()[0];
    args = msg.substring(1);
  
    do_command(cmd,args);
  }
    
  //Serial.println("Waiting");
  //delay(1000);
  //setModelLed(LED_LIGHT_OFF);
}

// callback for received data
void i2c_receiveData(int byteCount){
  char c;
  String msg;
  char cmd;
  String args;
  while(Wire.available()) {
    c = (char)Wire.read();
    msg += c;
  }
  
  Serial.print("Byte Count: ");
  Serial.println(byteCount);
  Serial.print("data received: ");
  Serial.println(msg.c_str());    

  cmd = msg.substring(0,1).c_str()[0];
  args = msg.substring(1);

  do_command(cmd,args);
}

// callback for sending data
void i2c_sendData(){
  if(FLAG_READY){
    Serial.print("Sending flag: ");
    Serial.println(FLAG_ENC);
    Wire.write(FLAG_ENC);
  }else{
    Serial.println("no aes128 key found");
    Wire.write("no aes128 key found");
  }
}

void do_command(char cmd, String args){
  Serial.print("Processing command: ");
  Serial.println(cmd);
  switch (cmd) {
    case 'c': updateCountDown(args); break;
    case 'n': updateNews(args); break;
    case 't': updateTop(args); break;
    default: break;
  }  
}

void updateCountDown(String args){
  
}

void updateNews(String args){
  
}

void updateTop(String args){
  
}

void draw(void){
  int chgPageDelay = 2000;
  u8g.undoRotation();

  // Print Logo
  u8g.firstPage();
  do {
    drawLogo();
  } while (u8g.nextPage());  
  delay(chgPageDelay);

  // Print Lol
  //u8g.firstPage();
  //do {
  //  drawLol();
  //} while (u8g.nextPage());  
  //delay(chgPageDelay);  
  
  // Print banner
  u8g.firstPage();
  do {
    drawBanner();
  } while (u8g.nextPage());  
  delay(chgPageDelay);

  // Print news
  u8g.firstPage();
  do {
    drawNews();
  } while (u8g.nextPage());  
  delay(chgPageDelay);
}

void drawLogo(void) {
  u8g.drawXBMP(0,0,hf7_width,hf7_height,hf7_bits);
}

void drawLol(void) {
  u8g.drawXBMP(0,0,lol_width,lol_height,lol_bits);
}

void drawBanner(void) {

  u8g.drawFrame(0,0,128,64);
  
  u8g.setFont(u8g_font_10x20);
  u8g.drawCircle(18,18,14);
  u8g.drawStr(10, 26, "HF");
  u8g.drawStr(38, 26, "Casino");

  u8g.setFont(u8g_font_6x10);
  u8g.drawStr(4, 50, "Welcome in Hell");
}

void drawNews(void) {
  u8g.setFont(u8g_font_6x10);
  u8g.drawStr(0, 10, "News");
  u8g.drawStr(5, 21, "news1");
  u8g.drawStr(5, 32, "news2");  
  u8g.drawStr(5, 43, "news3");
}

void setModelLed(int action) {
  unsigned long irCode;
  switch (action) {
    case LED_LIGHT_OFF: irCode = 0xF740BF;
      break;
  }
  Serial.print("Sending: ");
  Serial.println(irCode, HEX);
  irsend.sendNEC(irCode, 32);
}

